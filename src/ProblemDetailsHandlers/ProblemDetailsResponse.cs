using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Microsoft.AspNetCore.WebUtilities;
using PowerUtils.Net.Constants;
using PowerUtils.Validations;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Linq;
using System.Text.Json;

namespace PowerUtils.AspNetCore.WebAPI.ProblemDetailsHandlers
{
    public class ProblemDetailsResponse
    {
        #region PROPERTIES
        /// <summary>
        /// The HTTP status code([RFC7231], Section 6) generated
        /// </summary>
        public int Status { get; set; }

        /// <summary>
        /// A URI reference [RFC3986] that identifies the problem type
        /// </summary>
        [Required]
        public string Type { get; set; }

        /// <summary>
        /// A short, human-readable summary of the problem type. see[RFC7231], Section 3.4
        /// </summary>
        [Required]
        public string Title { get; set; }

        /// <summary>
        /// A URI reference that identifies the specific occurrence of the problem
        /// </summary>
        public string Instance { get; set; }

        /// <summary>
        /// ID generated by the problem to track logs
        /// </summary>
        [Required]
        public string TraceID { get; set; }

        /// <summary>
        /// Error field list
        /// </summary>
        /// <example>
        /// { "Field": "ErrorCode" }
        /// </example>
        [Required]
        public Dictionary<string, string> Errors { get; set; }
        #endregion


        #region PUBLIC METHODS
        /// <summary>
        /// Serialize problem details to JSON
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        { // DONE
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        /// Convert ProblemDetailsResponse to ProblemDetails
        /// </summary>
        /// <returns>ProblemDetails result</returns>
        public ProblemDetails ToBaseProblemDetails()
        {
            ProblemDetails problemDetails = new ProblemDetails();

            problemDetails.Type = Type;
            problemDetails.Title = Title;
            problemDetails.Status = Status;
            problemDetails.Instance = Instance;

            return problemDetails;
        }
        #endregion


        #region PUBLIC STATIC METHODS
        public static ProblemDetailsResponse Create(int statusCode)
        { // DONE
            ProblemDetailsResponse result = new ProblemDetailsResponse();

            result.Status = statusCode;
            result.Type = result.Status.GetStatusCodeLink();
            result.Title = ReasonPhrases.GetReasonPhrase(result.Status);

            result.Instance = null;
            result.TraceID = $"guid:{Guid.NewGuid()}";

            result.Errors = new Dictionary<string, string>();

            return result;
        }

        public static ProblemDetailsResponse Create(string method, string path, int statusCode)
        { // DONE
            ProblemDetailsResponse result = new ProblemDetailsResponse();

            result.Status = statusCode;
            result.Type = result.Status.GetStatusCodeLink();
            result.Title = ReasonPhrases.GetReasonPhrase(result.Status);

            result.Instance = method?.ToUpper() + ": " + path;
            result.TraceID = $"guid:{Guid.NewGuid()}";

            result.Errors = new Dictionary<string, string>();

            return result;
        }

        public static ProblemDetailsResponse Create(int statusCode, string errorMessage)
        { // DONE
            ProblemDetailsResponse result = new ProblemDetailsResponse();

            result.Status = statusCode;
            result.Type = result.Status.GetStatusCodeLink();
            result.Title = errorMessage;

            result.Instance = null;
            result.TraceID = $"guid:{Guid.NewGuid()}";

            result.Errors = new Dictionary<string, string>();

            return result;
        }

        public static ProblemDetailsResponse Create(HttpContext httpContext)
        { // DONE
            ProblemDetailsResponse result = new ProblemDetailsResponse();

            result.Status = httpContext?.Response?.StatusCode ?? 500; // Default value
            result.Type = result.Status.GetStatusCodeLink();
            result.Title = ReasonPhrases.GetReasonPhrase(result.Status);

            result.Instance = _mapInstance(httpContext);

            // This is often very handy information for tracing the specific request
            result.TraceID = Activity.Current?.Id ?? httpContext?.TraceIdentifier;
            if (string.IsNullOrWhiteSpace(result.TraceID))
            {
                result.TraceID = $"guid:{Guid.NewGuid()}";
            }

            result.Errors = new Dictionary<string, string>();

            return result;
        }

        public static ProblemDetailsResponse Create(HttpContext httpContext, ModelStateDictionary modelState)
        { // DONE
            ProblemDetailsResponse result = new ProblemDetailsResponse();

            result.Status = httpContext?.Response?.StatusCode ?? 400; // Default value
            result.Type = result.Status.GetStatusCodeLink();
            result.Title = ReasonPhrases.GetReasonPhrase(result.Status);

            result.Instance = _mapInstance(httpContext);

            result.TraceID = Activity.Current?.Id ?? httpContext?.TraceIdentifier;
            if (string.IsNullOrWhiteSpace(result.TraceID))
            {
                result.TraceID = $"guid:{Guid.NewGuid()}";
            }

            result.Errors = _mapModelState(modelState);

            return result;
        }

        public static ProblemDetailsResponse Create(HttpContext httpContext, IEnumerable<ValidationNotification> notifications)
        { // DONE
            ProblemDetailsResponse result = new ProblemDetailsResponse();

            result.Status = httpContext?.Response?.StatusCode ?? 400; // Default value
            result.Type = result.Status.GetStatusCodeLink();
            result.Title = ReasonPhrases.GetReasonPhrase(result.Status);

            result.Instance = _mapInstance(httpContext);

            result.TraceID = Activity.Current?.Id ?? httpContext?.TraceIdentifier;
            if (string.IsNullOrWhiteSpace(result.TraceID))
            {
                result.TraceID = $"guid:{Guid.NewGuid()}";
            }

            var errors = notifications
                .ToDictionary(
                key => key.Property,
                code => code.ErrorCode
            );

            result.Errors = errors;

            return result;
        }

        public static ProblemDetailsResponse Create(ActionContext actionContext)
        { // DONE
            ProblemDetailsResponse result = new ProblemDetailsResponse();

            result.Status = actionContext?.HttpContext?.Response?.StatusCode ?? 500; // Default value
            result.Type = result.Status.GetStatusCodeLink();
            result.Title = ReasonPhrases.GetReasonPhrase(result.Status);

            result.Instance = _mapInstance(actionContext?.HttpContext);

            result.TraceID = Activity.Current?.Id ?? actionContext?.HttpContext?.TraceIdentifier;
            if (string.IsNullOrWhiteSpace(result.TraceID))
            {
                result.TraceID = $"guid:{Guid.NewGuid()}";
            }

            result.Errors = _mapModelState(actionContext.ModelState);

            return result;
        }

        public static ProblemDetailsResponse Create(
            ActionContext actionContext,
            IValidationNotificationsPipeline validationNotificationsPipeline
        )
        { // DONE
            ProblemDetailsResponse result = new ProblemDetailsResponse();

            result.Status = (int)validationNotificationsPipeline.StatusCode;
            result.Type = result.Status.GetStatusCodeLink();
            result.Title = ReasonPhrases.GetReasonPhrase(result.Status);

            result.Instance = _mapInstance(actionContext?.HttpContext);

            result.TraceID = Activity.Current?.Id ?? actionContext?.HttpContext?.TraceIdentifier;
            if (string.IsNullOrWhiteSpace(result.TraceID))
            {
                result.TraceID = $"guid:{Guid.NewGuid()}";
            }

            var errors = validationNotificationsPipeline.Notifications
                .ToDictionary(
                key => key.Property,
                code => code.ErrorCode
            );

            result.Errors = errors;

            return result;
        }
        #endregion


        #region PRIVATE STATIC METHODS
        private static Dictionary<string, string> _mapModelState(ModelStateDictionary modelState)
        { // DONE
            Dictionary<string, string> errors;

            if (modelState == null)
            {
                errors = new Dictionary<string, string>();
            }
            else
            {
                errors = modelState.Where(s => s.Value.Errors.Count > 0).ToDictionary(
                    kvp => kvp.Key,
                    kvp => kvp.Value.Errors.Select(e => e.ErrorMessage).First()
                );

                if (errors.ContainsKey("$"))
                { // When cannot deserialize the Request DTO. Example when the objecto is a JsonObjecto and received the ArrayJson
                    errors.Remove("$");
                    errors.Add("Content", ErrorCodes.INVALID);
                }

                // Override the error when the body is not sent
                var bodyError = errors
                    .FirstOrDefault(f => f.Key == string.Empty && f.Value.Contains("A non-empty request body is required", StringComparison.InvariantCultureIgnoreCase));
                if (bodyError.Key != null)
                {
                    errors.Remove(bodyError.Key);
                    errors.Add("Body", ErrorCodes.REQUIRED);
                }
            }

            return errors;
        }

        private static string _mapInstance(HttpContext httpContext)
        { // DONE
            string result;
            if (httpContext?.Request == null)
            {
                result = null;
            }
            else
            {
                result = httpContext.Request.Method + ": " + httpContext.Request.Path.Value;
            }

            return result;
        }
        #endregion
    }
}